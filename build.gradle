plugins {
    id 'java'
    id 'application'
    id 'net.researchgate.release' version '2.6.0'
    id 'com.github.ben-manes.versions' version '0.15.0'
    id 'org.springframework.boot' version '1.5.4.RELEASE'
    id 'nebula.ospackage' version '4.4.0'
    id 'org.hidetake.ssh' version '2.9.0'
}

group 'com.ianhattendorf.geth'
version '1.0-SNAPSHOT'
description 'Display ethereum node status'

sourceCompatibility = 1.8
mainClassName = 'com.ianhattendorf.geth.gethstatus.Application'

def webappDir = 'src/main/webapp'

repositories {
    mavenCentral()
}

dependencies {
    def retrofitVersion = '2.3.0'

    compile 'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-thymeleaf',
            'org.springframework.boot:spring-boot-starter-websocket',
            'org.springframework.boot:spring-boot-starter-cache',
            'org.springframework.boot:spring-boot-devtools',
            'javax.cache:cache-api:1.0.0',
            'org.ehcache:ehcache:3.3.1',
            'com.fasterxml.jackson.datatype:jackson-datatype-jsr310',
            'com.github.briandilley.jsonrpc4j:jsonrpc4j:1.5.0',
            "com.squareup.retrofit2:retrofit:$retrofitVersion",
            "com.squareup.retrofit2:converter-jackson:$retrofitVersion",
            "com.squareup.retrofit2:adapter-java8:$retrofitVersion",
            'commons-io:commons-io:2.5'

    testCompile 'org.springframework.boot:spring-boot-starter-test',
            'com.squareup.okhttp3:mockwebserver:3.8.1',
            'org.skyscreamer:jsonassert:1.5.0'
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint" << "-Werror"
    }
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:all,-missing')
    }
}

clean.doFirst {
    delete "${rootDir}/src/main/resources/static/"
}

task yarnInstall(type: Exec) {
    workingDir webappDir

    commandLine 'yarn', 'install'
}

task lintClient(type: Exec, dependsOn: yarnInstall) {
    workingDir webappDir

    commandLine 'yarn', 'run', 'lint'
}

task testClient(type: Exec, dependsOn: yarnInstall) {
    workingDir webappDir

    commandLine 'yarn', 'run', 'test', '--', '--single-run'
}

task e2eTestClient(type: Exec, dependsOn: yarnInstall) {
    workingDir webappDir

    commandLine 'yarn', 'run', 'e2e'
}

task buildClient(type: Exec, dependsOn: yarnInstall) {
    workingDir webappDir

    commandLine 'yarn', 'run', 'build', '--', '-prod', '--no-progress'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

tasks.withType(Tar) {
    // LZMA would be nice
    compression = Compression.BZIP2
    extension = 'tar.bz2'
}

release {
    preTagCommitMessage = '[Release]: '
    tagCommitMessage = '[Release]: tagging'
    newVersionCommitMessage = '[Release]: new snapshot version'
    tagTemplate = 'v${version}'
}
ospackage {
    release '1'
    os = LINUX
    summary description
    url 'https://github.com/ianhattendorf/geth-status'

    preInstall file('rpm/preinstall.sh')
    postInstall "systemctl preset ${project.name} > /dev/null 2>&1"
    preUninstall "systemctl disable ${project.name} > /dev/null 2>&1" + '\n' +
            "systemctl stop ${project.name} > /dev/null 2>&1"
    postUninstall "systemctl daemon-reload > /dev/null 2>&1"

    requires('java-headless', '1.8', GREATER | EQUAL)

    into '/opt/geth-status'

    from(jar.outputs.files) {
        into 'bin'
        rename { String fileName ->
            fileName.replace("-$project.version", '')
        }
    }
    from('src/main/resources/application.properties') {
        fileType CONFIG | NOREPLACE
        into 'config'
    }
    from('rpm/geth-status.service') {
        into '/etc/systemd/system'
        addParentDirs false
        user 'root'
        permissionGroup 'root'
        fileMode = 0644
    }
}

task elRpm(type: Rpm) {
    distribution 'el7'
    release "$release.$distribution"
}

task fedoraRpm(type: Rpm) {
    distribution 'fc26'
    release "$release.$distribution"
}

task buildOSPackages {
    dependsOn elRpm
    dependsOn fedoraRpm
    dependsOn buildDeb
}

remotes {
    repoServer {
        host = 'repo'
        user = 'repo'
        agent = true
        knownHosts = allowAnyHosts
    }
}

task deploy {
    doLast {
        ssh.run {
            session(remotes.repoServer) {
                def files = fileTree('build/distributions').filter { it.name =~ /\.rpm$/ }.files
                put from: files, into: '/var/lib/repos/staging'
            }
        }
    }
}

testClient.dependsOn lintClient
e2eTestClient.dependsOn testClient
buildClient.dependsOn lintClient
//buildClient.dependsOn e2eTestClient // TODO fix client tests (headless browser, don't require live websocket)
build.dependsOn buildClient
processResources.dependsOn buildClient

elRpm.dependsOn build
fedoraRpm.dependsOn build
buildDeb.dependsOn build
